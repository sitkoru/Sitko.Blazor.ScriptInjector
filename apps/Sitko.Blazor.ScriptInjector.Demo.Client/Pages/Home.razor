@page "/"
@rendermode InteractiveAuto
@inject IScriptInjector ScriptInjector
@using System.Threading
<PageTitle>Home</PageTitle>

<h1>Welcome to Sitko.Blazor.ScriptInjector Demo!</h1>

<div id="inline">Inline script is loading...</div>
<div id="url">Script from url is loading...</div>
<div id="resource">Resource script is loading...</div>
@if (ScriptsLoaded)
{
    <p>All scripts are loaded!</p>
}
<button @onclick="LoadScriptsAsync">Click to load scripts</button><br/>
<button @onclick="LoadInlineScriptAsync">Click to load scripts in chain</button><br/>
<button @onclick="LoadMultipleScriptsWithSameIdAsync">Load multpe scripts with same id key (see browser console)</button><br/>
<button @onclick="LoadInlineCssAsync">Click to load inline css</button><br/>
<button @onclick="LoadResourceCssAsync">Click to load resource css</button><br/>
<button @onclick="LoadUrlCssAsync">Click to load css from url</button><br/>

@code{
    public bool ScriptsLoaded { get; set; }

    private ScriptInjectRequest InlineScriptRequest => ScriptInjectRequest.Inline("inline", "document.getElementById('inline').innerText = 'Inline script is executed';");
    private ScriptInjectRequest UrlScriptRequest => ScriptInjectRequest.FromUrl("url", "/script.js");
    private ScriptInjectRequest ResourceScriptRequest => ScriptInjectRequest.FromResource("resource", GetType().Assembly, "assembly.js");
    private CssInjectRequest InlineCssRequest => CssInjectRequest.Inline("inlinecss", "body{background: blue;}");
    private CssInjectRequest ResourceCssRequest => CssInjectRequest.FromResource("resourcecss", GetType().Assembly, "assembly.css");
    private CssInjectRequest UrlCssRequest => CssInjectRequest.FromUrl("urlcss", "/style.css");

    private async Task LoadScriptsAsync()
    {
        await ScriptInjector.InjectAsync(new[]
        {
            // inline script
            InlineScriptRequest,
            // script from url
            UrlScriptRequest,
            // script from resource
            ResourceScriptRequest
        }, _ =>
        {
            // all scripts are loaded
            ScriptsLoaded = true;
            return Task.CompletedTask;
        });
    }

    private Task LoadInlineScriptAsync()
    {
        return ScriptInjector.InjectAsync(InlineScriptRequest, LoadUrlScriptAsync);
    }

    private Task LoadUrlScriptAsync(CancellationToken cancellationToken)
    {
        return ScriptInjector.InjectAsync(UrlScriptRequest, LoadResourceScriptAsync, cancellationToken);
    }

    private Task LoadResourceScriptAsync(CancellationToken cancellationToken)
    {
        return ScriptInjector.InjectAsync(ResourceScriptRequest, _ =>
        {
            ScriptsLoaded = true;
            return Task.CompletedTask;
        }, cancellationToken);
    }

    private Task LoadMultipleScriptsWithSameIdAsync()
    {
        return ScriptInjector.InjectAsync(new[]
        {
            ScriptInjectRequest.Inline("console", "console.log('Inline script is executed');"),
            ScriptInjectRequest.Inline("console", "console.log('Inline script 2 is executed');"),
            ScriptInjectRequest.Inline("console", "console.log('Inline script 3 is executed');"),
        });
    }

    private Task LoadInlineCssAsync()
    {
        return ScriptInjector.InjectAsync(InlineCssRequest);
    }

    private Task LoadResourceCssAsync()
    {
        return ScriptInjector.InjectAsync(ResourceCssRequest);
    }

    private Task LoadUrlCssAsync()
    {
        return ScriptInjector.InjectAsync(UrlCssRequest);
    }

}
